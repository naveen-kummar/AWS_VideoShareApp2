{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../lib/handlers/api.ts"],"names":[],"mappings":";;;;;;;;;;;;AAKA;;;;;;EAME;AACK,MAAM,kBAAkB,GAAG,CAAsB,EAAC,MAAM,EAAE,OAAO,EAGvE,EAAE,EAAE;IACG,MAAM,sBAAsB,GAA2B,CAAO,CAAC,EAAC,EAAE;QAE9D,IAAG,CAAC;YACA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAA;YACrD,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;YAClC,OAAO;gBACH,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,UAAU,EAAG,GAAG;aACnB,CAAA;QACL,CAAC;QAAA,OAAO,KAAK,EAAE,CAAC;YACZ,WAAW;YAEX,cAAc;YAEd,gBAAgB;YAEhB,OAAO;gBACH,IAAI,EAAE,sBAAsB;gBAC5B,UAAU,EAAE,GAAG;aAClB,CAAC;QAEN,CAAC;IAEL,CAAC,CAAA,CAAA;IAED,OAAO,sBAAsB,CAAA;AACrC,CAAC,CAAA;AA9BY,QAAA,kBAAkB,sBA8B9B","sourcesContent":["import { APIGatewayEvent, APIGatewayProxyHandler } from \"aws-lambda\"\r\nimport {z, ZodSchema } from \"zod\"\r\n\r\n\r\n\r\n/*\r\nwithBodyValidation: Below is a function which returns \r\nAPIGatewayProxyHandler, Again which is an another function\r\n\r\nInput: schema - Zod Schema\r\n       handler - Main Handler which will be trihggerred by AWS Lambda upon the API PUT Call\r\n*/\r\nexport const withBodyValidation = <T extends ZodSchema>({schema, handler} : {\r\n    schema: T,\r\n    handler: (body: z.infer<T>, e: APIGatewayEvent) => Promise<any>\r\n}) => {\r\n        const apiGatewayProxyHandler: APIGatewayProxyHandler = async (e)=> {\r\n\r\n            try{\r\n                const body = schema.parse(JSON.parse(e.body || \"{}\"))\r\n                const res = await handler(body, e)\r\n                return {\r\n                    body: JSON.stringify(e),\r\n                    statusCode : 200\r\n                }\r\n            }catch (error) {\r\n                // zodError\r\n\r\n                // known error\r\n\r\n                // unknown error\r\n\r\n                return {\r\n                    body: \"Something went wrong\",\r\n                    statusCode: 400,\r\n                };\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return apiGatewayProxyHandler\r\n}"]}